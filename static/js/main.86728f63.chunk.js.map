{"version":3,"sources":["app/gp3Slice.js","App.js","app/store.js","index.js"],"names":["gp2max","state","gp3size","size","gp3iops","iops","gp3mibps","mibps","disks","Math","max","ceil","floor","gp2min","min","iopsMax","gp2equivalent","gp3Slice","createSlice","name","initialState","sizeMax","iopsMin","mibpsMin","mibpsMax","gp2","reducers","setDiskSize","action","payload","setDiskCount","setIOPS","setMIBPS","actions","money","x","round100","round","connect","gp3","props","Container","Row","className","xs","md","Jumbotron","style","width","Form","Group","controlId","Label","Control","type","placeholder","onChange","e","dispatch","parseInt","target","value","Text","step","change","slideStop","Table","striped","hover","configureStore","reducer","gp3Reducer","window","store","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.86728f63.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\n// Recommended reading\r\n// https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-volume-types.html\r\n// https://aws.amazon.com/ebs/pricing/\r\n// https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-io-characteristics.html\r\n\r\nvar gp2max = function(state) {\r\n  let gp3size  = state.size\r\n  let gp3iops  = state.iops\r\n  let gp3mibps = state.mibps\r\n\r\n  // Number of disks\r\n  // - 1 per 16TB\r\n  // - 1 disk per 250MB/s of throughput\r\n  // - 1 disk per 16000 IOPs\r\n  var disks = Math.max(Math.ceil(gp3size / 16000), Math.ceil(gp3mibps / 250), gp3iops / 16000, 1)\r\n\r\n  // Size might need to be larger to reach the peaks\r\n  var size = gp3size\r\n  if (size < (gp3mibps / 250 * 334)) {\r\n    // we can't reach the desired throughput with that GB\r\n    size = gp3mibps / 250 * 334\r\n  }\r\n  if (size < 5334 * gp3iops / 16000) {\r\n    size = 5334 * gp3iops / 16000\r\n  }\r\n\r\n  var iops = Math.floor(16000 * size / 5334)\r\n  // iops * maximum iop size (256KB) / 1024 (KB/MB)\r\n  var mibps = Math.floor(iops / 4)\r\n\r\n  return {\r\n    disks: disks,\r\n    size: size,\r\n    iops: iops,\r\n    mibps: mibps,\r\n  }\r\n}\r\n\r\nvar gp2min = function(state) {\r\n  let gp3size  = state.size\r\n  let gp3iops  = state.iops\r\n  let gp3mibps = state.mibps\r\n\r\n  // Number of disks\r\n  // - 1 per 16TB\r\n  // - 1 disk per 250MB/s of throughput\r\n  // - 1 disk per 3000 IOPs\r\n  var disks = Math.max(Math.ceil(gp3size / 16000), Math.ceil(gp3mibps / 250), Math.ceil(gp3iops / 3000), 1)\r\n\r\n  // Size might need to be larger to reach the peaks\r\n  var size = gp3size\r\n  if (size < (gp3mibps / 250 * 334)) {\r\n    // we can't reach the desired throughput with that GB\r\n    size = gp3mibps / 250 * 334\r\n  }\r\n  if (size < gp3iops / 3000) {\r\n    size = gp3iops / 3000\r\n  }\r\n\r\n  var iops = Math.floor(Math.min(16000 * disks, Math.max(16000 * size / 5334)))\r\n  var iopsMax = Math.max(iops, 3000 * disks)\r\n  var mibps = Math.floor(iops / 4)\r\n\r\n  return {\r\n    disks: disks,\r\n    size: size,\r\n    iops: iops,\r\n    iopsMax: iopsMax,\r\n    mibps: mibps,\r\n  }\r\n}\r\n\r\nvar gp2equivalent = function(state) {\r\n  return {\r\n    min: gp2min(state),\r\n    max: gp2max(state),\r\n  }\r\n}\r\n\r\nexport const gp3Slice = createSlice({\r\n  name: 'gp3',\r\n  initialState: {\r\n    sizeMax: 16000,\r\n    size: 0,\r\n\r\n    disks: 1,\r\n\r\n    iops: 0,\r\n    iopsMax: 0,\r\n    iopsMin: 0,\r\n\r\n    mibps: 0,\r\n    mibpsMin: 0,\r\n    mibpsMax: 0,\r\n\r\n    gp2: {},\r\n  },\r\n  reducers: {\r\n    setDiskSize: (state, action) => {\r\n      state.size = action.payload\r\n      if (state.size <= 0) {\r\n        state.size = 1\r\n      }\r\n      if (state.size > state.disks * 16000) {\r\n        state.disks = 1 + Math.floor(state.size / 16000)\r\n      }\r\n      if (state.size < state.disks) {\r\n        state.disks = state.size\r\n      }\r\n\r\n      state.iopsMin = Math.min(state.disks * state.size * 500, state.disks * 3000)\r\n      state.iopsMax = Math.min(state.disks * state.size * 500, state.disks * 16000)\r\n      if (state.iops < state.iopsMin) {\r\n        state.iops = state.iopsMin\r\n      }\r\n      if (state.iops > state.iopsMax) {\r\n        state.iops = state.iopsMax\r\n      }\r\n\r\n      state.mibpsMin = Math.min(state.iops / 4, state.disks * 125)\r\n      state.mibpsMax = Math.min(state.iops / 4, 1000 * state.disks)\r\n      if (state.mibps < state.mibpsMin) {\r\n        state.mibps = state.mibpsMin\r\n      }\r\n      if (state.mibps > state.mibpsMax) {\r\n        state.mibps = state.mibpsMax\r\n      }\r\n\r\n      state.gp2 = gp2equivalent(state)\r\n    },\r\n    setDiskCount: (state, action) => {\r\n      state.disks = action.payload\r\n      if (state.disks <= 0) {\r\n        state.disks = 1\r\n      }\r\n      if (state.size > state.disks * 16000) {\r\n        state.size =  state.disks * 16000\r\n      }\r\n      if (state.size < state.disks) {\r\n        state.size = state.disks\r\n      }\r\n\r\n      state.iopsMin = Math.min(state.disks * state.size * 500, state.disks * 3000)\r\n      state.iopsMax = Math.min(state.disks * state.size * 500, state.disks * 16000)\r\n      if (state.iops < state.iopsMin) {\r\n        state.iops = state.iopsMin\r\n      }\r\n      if (state.iops > state.iopsMax) {\r\n        state.iops = state.iopsMax\r\n      }\r\n\r\n      state.mibpsMin = Math.min(state.iops / 4, state.disks * 125)\r\n      state.mibpsMax = Math.min(state.iops / 4, 1000 * state.disks)\r\n      if (state.mibps < state.mibpsMin) {\r\n        state.mibps = state.mibpsMin\r\n      }\r\n      if (state.mibps > state.mibpsMax) {\r\n        state.mibps = state.mibpsMax\r\n      }\r\n\r\n      state.gp2 = gp2equivalent(state)\r\n    },\r\n    setIOPS: (state, action) => {\r\n      state.iops = action.payload\r\n\r\n      state.mibpsMin = Math.min(state.iops / 4, state.disks * 125)\r\n      state.mibpsMax = Math.min(state.iops / 4, 1000 * state.disks)\r\n      if (state.mibps < state.mibpsMin) {\r\n        state.mibps = state.mibpsMin\r\n      }\r\n      if (state.mibps > state.mibpsMax) {\r\n        state.mibps = state.mibpsMax\r\n      }\r\n\r\n      state.gp2 = gp2equivalent(state)\r\n    },\r\n    setMIBPS: (state, action) => {\r\n      state.mibps = action.payload\r\n\r\n      state.gp2 = gp2equivalent(state)\r\n    }\r\n  },\r\n});\r\n\r\nexport const { setDiskSize, setDiskCount, setIOPS, setMIBPS } = gp3Slice.actions;\r\n\r\nexport default gp3Slice.reducer;\r\n","import React from 'react';\r\nimport { connect, dispatch } from 'react-redux';\r\nimport { Container, Row, Jumbotron, Form, Table } from 'react-bootstrap';\r\nimport ReactBootstrapSlider from 'react-bootstrap-slider';\r\nimport \"bootstrap-slider/dist/css/bootstrap-slider.css\";\r\nimport {\r\n  setDiskSize,\r\n  setDiskCount,\r\n  setIOPS,\r\n  setMIBPS\r\n} from './app/gp3Slice';\r\n\r\nfunction money(x) {\r\n  return Math.ceil(x * 100) / 100\r\n}\r\n\r\nfunction round100(x) {\r\n  return Math.round(x * 100) / 100\r\n}\r\n\r\nfunction App(props) {\r\n  return (\r\n    <Container>\r\n      <Row className=\"justify-content-md-center\" xs={12} md={8}>\r\n        <Jumbotron style={{width: \"100%\"}}>\r\n          <Container>\r\n            <h1>AWS/GP3 calculator</h1>\r\n            <Form>\r\n              <Form.Group controlId=\"formDiskSize\">\r\n                <Form.Label>Storage capacity in GB</Form.Label>\r\n                <Form.Control size=\"lg\" type=\"number\" placeholder=\"100\"\r\n                  onChange={ e => props.dispatch(setDiskSize(parseInt(e.target.value))) }\r\n                />\r\n                <Form.Text className=\"text-muted\">\r\n                  { round100(props.size / 1000) } TB or { props.size } GB, { props.size * 0.08 }$ / month\r\n                </Form.Text>\r\n              </Form.Group>\r\n              <Form.Group controlId=\"formDiskNum\">\r\n                <Form.Label>Number of disks</Form.Label>\r\n                <Form.Control size=\"lg\" type=\"number\" placeholder=\"1\"\r\n                  onChange={e => props.dispatch(setDiskCount(parseInt(e.target.value))) }\r\n                />\r\n                <Form.Text className=\"text-muted\">\r\n                { round100(props.size / 1000 / props.disks) } TB or { round100(props.size / props.disks) } GB per disk, { money(props.size / props.disks * 0.08) }$ / disk / month\r\n                </Form.Text>\r\n              </Form.Group>\r\n              <strong>Baseline: {props.iopsMin} IOPs, {props.mibpsMin} MiB/s</strong>\r\n              <Form.Group>\r\n                <Form.Label>IOPs ({props.iopsMin}-{props.iopsMax}, {4000*props.disks} for max throughput)</Form.Label><br/>\r\n                <ReactBootstrapSlider \r\n                  value={props.iops}\r\n                  step={100}\r\n                  change={ e => props.dispatch(setIOPS(e.target.value)) }\r\n                  slideStop={ () => {} }\r\n                  max={props.iopsMax}\r\n                  min={props.iopsMin}\r\n                />\r\n                <Form.Text className=\"text-muted\">\r\n                {props.iops} IOPs, {round100(props.iops / props.disks)} per disk, {money((props.iops - props.iopsMin)*0.005)}$ / month\r\n                </Form.Text>\r\n              </Form.Group>\r\n              <Form.Group>\r\n                <Form.Label>MiB/s ({props.mibpsMin}-{props.mibpsMax})</Form.Label><br/>\r\n                <ReactBootstrapSlider \r\n                  value={props.mibps}\r\n                  step={1}\r\n                  change={ e => props.dispatch(setMIBPS(e.target.value)) }\r\n                  slideStop={ () => {} }\r\n                  max={props.mibpsMax}\r\n                  min={props.mibpsMin}\r\n                />\r\n                <Form.Text className=\"text-muted\">\r\n                  {props.mibps} MiB/s, {round100(props.mibps / props.disks)} per disk, {money((props.mibps - props.mibpsMin)*0.04)}$ / month\r\n                </Form.Text>\r\n              </Form.Group>\r\n            </Form>\r\n            {!!props.size && !!props.disks &&\r\n            <>\r\n            <h1>Total cost:  { money(props.size * 0.08 + (props.iops - props.iopsMin)*0.005 + (props.mibps - props.mibpsMin)*0.04) }$/month</h1>\r\n            <Table striped hover>\r\n              <tbody>\r\n                <tr><td>Disks</td><td>{ props.disks} @ { round100(props.size / props.disks / 1000) } TB or { round100(props.size / props.disks) } GB</td></tr>\r\n                <tr><td>Size</td><td>{ round100(props.size / 1000) } TB or { props.size } GB</td></tr>\r\n                <tr><td>IOPS</td><td>{ props.iops }</td></tr>\r\n                <tr><td>MB/s</td><td>{ props.mibps }</td></tr>\r\n             </tbody>\r\n            </Table>\r\n            </>\r\n            }\r\n            {!!props.gp2 && !!props.gp2.min &&\r\n            <>\r\n            <hr/>\r\n            <h1>GP2: {money(props.gp2.min.size * 0.1)}$/month - {money(props.gp2.max.size * 0.1)}$/month</h1>\r\n            <Table striped hover>\r\n              <tbody>\r\n                <tr><td>Disks</td>\r\n                    <td>{ props.gp2.min.disks} @ { round100(props.gp2.min.size / props.gp2.min.disks / 1000) } TB or { round100(props.gp2.min.size / props.gp2.min.disks) } GB</td>\r\n                    <td>{ props.gp2.max.disks} @ { round100(props.gp2.max.size / props.gp2.max.disks / 1000) } TB or { round100(props.gp2.max.size / props.gp2.max.disks) } GB</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>Size</td>\r\n                    <td>{ round100(props.gp2.min.size / 1000) } TB or { props.gp2.min.size } GB</td>\r\n                    <td>{ round100(props.gp2.max.size / 1000) } TB or { props.gp2.max.size } GB</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>IOPS</td>\r\n                    <td>{ props.gp2.min.iops } (burst: { props.gp2.min.iopsMax })</td>\r\n                    <td>{ props.gp2.max.iops }</td>\r\n                </tr>\r\n                <tr>\r\n                  <td>MB/s</td>\r\n                  <td>{ props.gp2.min.mibps }</td>\r\n                  <td>{ props.gp2.max.mibps }</td>\r\n                </tr>\r\n                <tr>\r\n                  <td>Cost</td>\r\n                  <td><strong>{money(props.gp2.min.size * 0.1)}$/month</strong></td>\r\n                  <td><strong>{money(props.gp2.max.size * 0.1)}$/month</strong></td>\r\n                </tr>\r\n             </tbody>\r\n            </Table>\r\n            </>\r\n            }\r\n         </Container>\r\n        </Jumbotron>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default connect(state => {\r\n  return state.gp3;\r\n})(App);\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport gp3Reducer from './gp3Slice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    gp3: gp3Reducer,\r\n  },\r\n});\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\n\r\nif (!!window) {\r\n  window.store = store;\r\n}\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}